/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#undef ZMK_BEHAVIORS_KEEP_ALL

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NAV 1
#define SYM 2
#define PROG_SYM 3
#define NUMFN 4
#define UTIL 5

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        LOG_AND: LOG_AND {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp AMPS &kp AMPS>
                ;
        };

        LOG_OR: LOG_OR {
           compatible = "zmk,behavior-macro";
           #binding-cells = <0>;
           bindings
               = <&macro_tap &kp PIPE &kp PIPE>
               ;
        };

        INCLUDE: INCLUDE {
           compatible = "zmk,behavior-macro";
           #binding-cells = <0>;
           bindings
               = <&macro_tap &kp I &kp N &kp C &kp L &kp U &kp D &kp E &kp DQT &kp DQT &kp LEFT>
               ;
        };

        ARROW_OP: ARROW_OP {
            compatible = "zmk,behavior-macro";
                   #binding-cells = <0>;
                   bindings
                       = <&macro_tap &kp MINUS &kp GT>
                       ;
        };

           ARROW_FN: ARROW_FN {
                    compatible = "zmk,behavior-macro";
                           #binding-cells = <0>;
                           bindings
                               = <&macro_tap &kp EQUAL &kp GT>
                               ;
                };

        DBL_QT: DBL_QT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
              = <&macro_tap &kp DQT &kp DQT &kp LEFT>
              ;
        };

        LSFT_OP: LSFT_OP {
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                    bindings
                      = <&macro_tap &kp LT &kp LT>
                      ;
                };

         RSFT_OP: RSFT_OP {
                     compatible = "zmk,behavior-macro";
                     #binding-cells = <0>;
                     bindings
                       = <&macro_tap &kp GT &kp GT>
                       ;
                 };

    UPROPERTY: UPROPERTY {
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
                       bindings
                       = <&macro_tap &kp U &kp P &kp R &kp O &kp P &kp E &kp R &kp T &kp Y &kp LPAR &kp RPAR &kp LEFT>
                       ;
                 };

    UFUNCTION: UFUNCTION {
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
                       bindings
                       = <&macro_tap &kp U &kp F &kp U &kp N &kp C &kp T &kp I &kp O &kp N &kp LPAR &kp RPAR &kp LEFT>
                       ;
                 };

        DBL_EQL: DBL_EQL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
                      bindings
                      = <&macro_tap &kp EQUAL &kp EQUAL>
                      ;
                };

        TRPL_EQL: TRPL_EQL {
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                              bindings
                              = <&macro_tap &kp EQUAL &kp EQUAL &kp EQUAL>
                              ;
                        };

        NOT_EQL: NOT_EQL {
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                              bindings
                              = <&macro_tap &kp EXCL &kp EQUAL>
                              ;
                        };


        GT_EQL: GT_EQL {
                    compatible = "zmk,behavior-macro";
                    #binding-cells = <0>;
                              bindings
                              = <&macro_tap &kp GT &kp EQUAL>
                              ;
                        };

         LT_EQL: LT_EQL {
                     compatible = "zmk,behavior-macro";
                     #binding-cells = <0>;
                               bindings
                               = <&macro_tap &kp LT &kp EQUAL>
                               ;
                         };


         PRN: PRN {
                     compatible = "zmk,behavior-macro";
                     #binding-cells = <0>;
                               bindings
                               = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>
                               ;
                         };

          BRC: BRC {
                      compatible = "zmk,behavior-macro";
                      #binding-cells = <0>;
                                bindings
                                = <&macro_tap &kp LBRC &kp RBRC &kp LEFT>
                                ;
                          };

           BKT: BKT {
                       compatible = "zmk,behavior-macro";
                       #binding-cells = <0>;
                                 bindings
                                 = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>
                                 ;
                           };

            ANGL: ANGL {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                                  bindings
                                  = <&macro_tap &kp LT &kp GT &kp LEFT>
                                  ;
                            };

             INC: INC {
                         compatible = "zmk,behavior-macro";
                         #binding-cells = <0>;
                                   bindings
                                   = <&macro_tap &kp PLUS &kp PLUS>
                                   ;
                             };


              DEC: DEC {
                          compatible = "zmk,behavior-macro";
                          #binding-cells = <0>;
                                    bindings
                                    = <&macro_tap &kp MINUS &kp MINUS>
                                    ;
                              };
    };

    combos {
        compatible = "zmk,combos";
        c_bps {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp BSPC>;
        };

         c_ctrl_bps {
             timeout-ms = <50>;
             key-positions = <16 17>;
             bindings = <&kp LC(BSPC)>;
         };
         c_colon {
              timeout-ms = <50>;
              key-positions = <27 28>;
              bindings = <&kp COLON>;
         }

         c_semicolon {
              timeout-ms = <50>;
              key-positions = <28 29>;
              bindings = <&kp SEMI>;
         }

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Y      &kp C      &kp L       &kp M          &kp K         &kp Z            &kp F          &kp U       &kp COMMA      &kp APOS
                &hm LGUI I &hm LALT S &hm LSHFT R &hm LCTRL T    &kp G         &kp P            &hm RCTRL N    &hm RSHFT E &hm LALT A &hm RGUI O
                &kp Q      &kp V      &kp W       &kp D          &kp J         &kp B            &kp  H         &kp SLASH   &kp DOT    &kp X
                                                  &lt SYM TAB  &lt NUMFN ENTER     &lt NAV SPACE  &lt UTIL ESC
            >;
        };

        sym_layer {
            bindings = <
                &kp AT   &kp HASH     &kp DLLR    &kp PRCNT &kp UNDER       &kp CARET         &kp AMPS         &kp STAR      &kp COLON    &kp SEMI
                &kp EQUAL  &kp APOS  &kp DQT      &kp GRAVE &kp MINUS       &kp BSLH          &kp LPAR         &kp RPAR      &kp LBRC     &kp RBRC
                &kp TILDE  &trans     &trans   &trans    &trans             &kp PIPE          &kp LBKT         &kp RBKT      &kp LT       &kp GT
                                                  &trans   &trans           &trans          &trans
            >;
        };

     prog_sym_layer {
            bindings = <
                &DBL_EQL   &TRPL_EQL  &NOT_EQL    &GT_EQL          &trans       &trans           &LOG_AND         &LOG_OR      &INCLUDE   &trans
                &PRN       &BRC     &BKT      &ANGL          &trans       &trans           &ARROW_OP        &ARROW_FN    &DBL_QT   &trans
                &DEC     &INC     &trans      &trans          &trans       &trans           &LSFT_OP         &RSFT_OP       &UPROPERTY   &UFUNCTION
                                                  &trans          &trans       &trans           &trans
            >;
        };

        nav_layer {
            bindings = <
                &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans      &trans     &trans
          &kp LC(LS(TAB))  &trans     &trans      &trans      &kp LC(TAB)      &trans           &kp LEFT       &kp DOWN    &kp UP   &kp RIGHT
                &trans     &trans     &trans      &trans          &trans       &trans           &kp HOME       &kp PG_DN   &kp PG_UP  &kp END
                                                  &trans          &trans       &kp ESC          &kp DEL
            >;
        };

        numfn_layer {
            bindings = <
                &kp F9     &kp F10    &kp F11     &kp F12          &trans       &kp N7           &kp N8         &kp N9      &trans     &trans
                &kp F5     &kp F6     &kp F7      &kp F8          &trans       &kp N4           &kp N5         &kp N6   &trans     &trans
                &kp F1     &kp F2     &kp F3      &kp F4         &trans       &kp N1           &kp N2       &kp N3      &trans     &trans
                                      &trans      &trans         &kp N0           &trans
            >;
        };


        util_layer {
            bindings = <
                 &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans      &trans     &trans
                 &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans      &trans     &trans
                 &trans     &kp LG(LS(S))     &kp DEL      &trans          &trans       &trans           &trans         &trans      &trans     &trans
                                                   &trans          &trans       &trans          &trans
            >;
        };
    };
};


